{
    "version": "https://jsonfeed.org/version/1",
    "title": "MONET Tech-Blog",
    "description": "This is a tech-blog of MONET-Technologies",
    "home_page_url": "https://monet-technologies-com.github.io/tech-blog",
    "items": [
        {
            "id": "https://monet-technologies-com.github.io/tech-blog/2020/08/30/%E3%83%AB%E3%83%BC%E3%83%88%E6%A4%9C%E7%B4%A2OSS%20(OSRM)%20%E3%81%AE%E4%BA%88%E6%B8%AC%E7%B2%BE%E5%BA%A6%E3%82%92%E8%AA%BF%E3%81%B9%E3%81%BE%E3%81%97%E3%81%9F/",
            "url": "https://monet-technologies-com.github.io/tech-blog/2020/08/30/%E3%83%AB%E3%83%BC%E3%83%88%E6%A4%9C%E7%B4%A2OSS%20(OSRM)%20%E3%81%AE%E4%BA%88%E6%B8%AC%E7%B2%BE%E5%BA%A6%E3%82%92%E8%AA%BF%E3%81%B9%E3%81%BE%E3%81%97%E3%81%9F/",
            "title": "ルート検索OSS (OSRM) の予測精度を調べました",
            "date_published": "2020-08-30T19:06:55.000Z",
            "content_html": "<p>システム部の登山担当太田です<br>\n山はいいぞ</p>\n<p>今回はルート検索の OSS である OSRM を検証した話です<br>\n地図データには OSM を用いています<br>\n導入は別で書きます</p>\n<h1 id=\"前談\"><a class=\"markdownIt-Anchor\" href=\"#前談\">#</a> 前談</h1>\n<h2 id=\"ルート検索のコスト削減\"><a class=\"markdownIt-Anchor\" href=\"#ルート検索のコスト削減\">#</a> ルート検索のコスト削減</h2>\n<p>MONET ではオンデマンドバスサービスを提供していますが<br>\nその裏ではルート検索による時間取得のロジックが何度もはしっています<br>\nマッチングの最適化など今後進めていくにあたってもルート検索のコストは抑えたいところです<br>\nそこで信頼性をある程度担保して低コストなルート検索できないかな？<br>\nということで OSS の有効性を検証しました</p>\n<h2 id=\"osmとは\"><a class=\"markdownIt-Anchor\" href=\"#osmとは\">#</a> OSM とは</h2>\n<p>素晴らしい取り組みとして Open Street Map (OSM) という地理情報をみんなで作って行こうぜ！オープンライセンスで誰にでも使えるようにしようぜ！というイカしたプロジェクトがあります<br>\n Open Street Map では所々足りていない情報はありますが<br>\n道路のクラス分けや店舗の情報までオープンライセンスと考えれば十分すぎるほどの地理データが利用できます<br>\n<img src=\"2020-08-31T130832.png\" alt=\"2020-08-31T130832\"></p>\n<div class=\"mdui-table-fluid theme-post__card__table--flat\"><table class=\"mdui-table mdui-table-hoverable \">\n<thead>\n<tr>\n<th></th>\n<th>OSM で利用可能な情報</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>○</td>\n<td>道路分類，建物分類，各名称</td>\n</tr>\n<tr>\n<td>×</td>\n<td>公共交通機関，交通量</td>\n</tr>\n</tbody>\n</table></div>\n <br>\n<p>もちろん自分たちで編集ができ，自宅の周りとか眺めてポチポチするだけで世界の地理データベース作成に貢献できるのでぜひやってみてください！</p>\n<h2 id=\"osrmとは\"><a class=\"markdownIt-Anchor\" href=\"#osrmとは\">#</a> OSRM とは</h2>\n<p>ルート検索エンジンの OSS です.<br>\n 中身のアルゴリズムは multi dikstra で OSM の地図情報を基に<br>\n最短ルートを決定します. (他のアルゴリズムも使用可)<br>\n 高速道路を省いたり，U ターンを禁止したりなど<br>\n痒いところの設定までできてしまう優れものです.<br>\nMapbox でも採用されていたりします.<a href=\"https://blog.mapbox.com/mapbox-directions-powered-by-osrm-4-8-1-cf2c45ae9aa8\" target=\"_blank\" rel=\"noopener\"> ブログ記事</a><br>\nルート検索だけでなく<br>\n MapBox でも採用されていたりします<br>\nこのルート検索エンジン使ってどれくらい正しく予測できるの？<br>\nというのが今回のお題です</p>\n<h2 id=\"osrmってどんな感じで動いてますん\"><a class=\"markdownIt-Anchor\" href=\"#osrmってどんな感じで動いてますん\">#</a> OSRM ってどんな感じで動いてますん</h2>\n<p>実装までは<a href=\"\">他記事</a>でも紹介されているので省きますが<br>\nザクっとこんな感じです</p>\n<ol>\n<li>OSM の最新地図情報を保存</li>\n<li>lua ファイル定義に従って重み付けされたグラフを作成</li>\n<li>HTTP サーバーを起動してリクエスト</li>\n</ol>\n<h1 id=\"検証\"><a class=\"markdownIt-Anchor\" href=\"#検証\">#</a> 検証</h1>\n<p>最初に東京都内の限られた範囲でランダムに 2 点を<br>\n限られた範囲でのルート検索制度を検証しました.<br>\n 検証範囲は以下になります.<br>\n<img src=\"2020-09-01T095105.png\" alt=\"2020-09-01T095105\"><br>\n この中で 1000 回程度 Google Direction API, OSRM API どちらも叩いて統計差がどれくらいか，変なルート通っていないか比較しました.</p>\n<p>設定はこんな感じです</p>\n<ul>\n<li>両方とも高速道路を通らない</li>\n<li>Direction API は trafficMode=optimistic</li>\n<li>OSRM は交通量情報を考慮しない</li>\n<li>OSRM の設定 lua ファイルはデフォルト (car.lua) のまま</li>\n</ul>\n<h1 id=\"結果\"><a class=\"markdownIt-Anchor\" href=\"#結果\">#</a> 結果</h1>\n<h2 id=\"予測結果\"><a class=\"markdownIt-Anchor\" href=\"#予測結果\">#</a> 予測結果</h2>\n<p>ランダムに 1 つ抜き出してきました.<br>\n ルートは似たようなルートを通っていますが<br>\n時間が結構ずれています.<br>\n<img src=\"2020-09-01T095718.png\" alt=\"2020-09-01T095718\"></p>\n<h2 id=\"距離誤差時間誤差\"><a class=\"markdownIt-Anchor\" href=\"#距離誤差時間誤差\">#</a> 距離誤差＆時間誤差</h2>\n<p>距離 / 時間の相対誤差のヒストグラムは以下のようになりました.<br>\n<img src=\"2020-09-01T095458.png\" alt=\"2020-09-01T095458\"><br>\n ルート可視化と同様に，距離誤差はデフォルトでもある程度正しいですが<br>\n時間誤差が大きいので修正が必要です.</p>\n<h2 id=\"速い道路-遅い道路の区分け\"><a class=\"markdownIt-Anchor\" href=\"#速い道路-遅い道路の区分け\">#</a> 速い道路，遅い道路の区分け</h2>\n<p>適当に低速，中速，高速で分けると<br>\n高速の比率が大きいほど予測を外していることが分かりました.<br>\n<img src=\"2020-09-01T100026.png\" alt=\"2020-09-01T100026\"></p>\n<h1 id=\"チューニング\"><a class=\"markdownIt-Anchor\" href=\"#チューニング\">#</a> チューニング</h1>\n<p>上記の結果を踏まえてチューニングを行いました.<br>\nlua ファイル内では道路のタグ名ごとに初期設定速度を入れています.<br>\n 今回はそちらを定数倍する大雑把な修正を行いました.</p>\n<p><img src=\"2020-09-01T100311.png\" alt=\"2020-09-01T100311\"></p>\n<p>これで統計的な情報をある程度合わせられる！(チューニングですので)</p>\n<h1 id=\"チューニング結果\"><a class=\"markdownIt-Anchor\" href=\"#チューニング結果\">#</a> チューニング結果</h1>\n<p>こんな感じになりました<br>\n散布図<br>\n<img src=\"2020-09-01T100439.png\" alt=\"2020-09-01T100439\"><br>\n ヒストグラム<br>\n<img src=\"2020-09-01T100501.png\" alt=\"2020-09-01T100501\"></p>\n<p>平均はあるていど合わせられましたが分散まで Google の予測と同様とはやはり行かなかったです.<br>\n 交通量の考慮も入ってくるのでそのままの代用は難しいですね.<br>\n 一方，大きく外すわけではないので裏のロジックに使用したりとか<br>\n使い道を考えれば導入できるのでは？という感触でした</p>\n<h1 id=\"まとめ\"><a class=\"markdownIt-Anchor\" href=\"#まとめ\">#</a> まとめ</h1>\n<p>Google と比較して検証しました<br>\n全体大きくは外さないですがダメな時もありました<br>\nどこまでの精度求めるかによりますが<br>\n存外使えるかもという事で裏側ロジックでの実装と導入<br>\nどの部分に使うかを模索することになりました.</p>\n",
            "tags": []
        },
        {
            "id": "https://monet-technologies-com.github.io/tech-blog/2020/08/18/Arch%20Linux%E3%81%AF%E3%81%84%E3%81%84%E3%81%9E%E3%81%A8%E3%81%84%E3%81%86%E8%A9%B1/",
            "url": "https://monet-technologies-com.github.io/tech-blog/2020/08/18/Arch%20Linux%E3%81%AF%E3%81%84%E3%81%84%E3%81%9E%E3%81%A8%E3%81%84%E3%81%86%E8%A9%B1/",
            "title": "Arch Linuxはいいぞという話",
            "date_published": "2020-08-18T03:00:00.000Z",
            "content_html": "<h1 id=\"はじめに\"><a class=\"markdownIt-Anchor\" href=\"#はじめに\">#</a> はじめに</h1>\n<p>MONET Technologies 株式会社、2020 年新卒入社の竹内です。</p>\n<p>この記事では、自分のおすすめする　Linux ディストリビューションである Arch Linux についてちょろっと書かせて頂きます。</p>\n<h2 id=\"arch-linuxが好きです\"><a class=\"markdownIt-Anchor\" href=\"#arch-linuxが好きです\">#</a> Arch Linux が好きです。</h2>\n<p>エンジニアなら一度は辿り着く境地、 <strong>「オレオレカスタマイズしたマイスイート PC を作りたい」</strong></p>\n<p>自分はハードウェアがそこそこの PC に、どんなソフトを載せるか、というところが好きです<br>\n (自作 PC 勢のお話も是非聴いてみたいですが)。</p>\n<p>そんな自分が大学生の時からお世話になっているのが、<br>\n<a href=\"https://www.archlinux.jp/\" target=\"_blank\" rel=\"noopener\">Arch Linux</a> という Linux のディストリビューションです。</p>\n<h2 id=\"何がいいの\"><a class=\"markdownIt-Anchor\" href=\"#何がいいの\">#</a> 何がいいの？</h2>\n<ul>\n<li>めちゃくちゃ軽量 &amp; 爆速 (個人の感想です)</li>\n<li>パッケージマネージャが優秀 (ほとんどのソフトを一つのパッケージマネージャで完結できて嬉しい)</li>\n<li>最初にミニマムな要素 (CLI 環境) しか入っていないので、ウィンドウマネージャなどを自分の好みで入れられる</li>\n</ul>\n<p>この辺が自分のツボです。特に、高校生の頃に買った弱い PC に Arch を入れた時、あんなに Windows が重かったのが爆速で動くようになった感動を今でも忘れられません。</p>\n<h2 id=\"まぁ諸説あるけど\"><a class=\"markdownIt-Anchor\" href=\"#まぁ諸説あるけど\">#</a> まぁ諸説あるけど</h2>\n<p>とはいえ、確かに、 <strong>少しメンテナンスが面倒くさい</strong> こともあるかもしれません。<br>\n特に、Arch には始め殆どの要素は入っていない状態からスタートするので、デスクトップ環境を構築するまでが面倒だったり、カーネルのアップデートで起動しなくなったり、ということも無くはないです。</p>\n<p>が、手のかけた子ほど可愛い、そう思いませんか？(個人の意見です)</p>\n<p>何か問題が起きたとしても、<a href=\"https://wiki.archlinux.jp/index.php/%E3%83%A1%E3%82%A4%E3%83%B3%E3%83%9A%E3%83%BC%E3%82%B8\" target=\"_blank\" rel=\"noopener\">Arch Wiki</a> がかなり優秀なので、大抵なんとかなります。</p>\n<p>余談ですが、Ubuntu など別の Linux ディストリビューションを使っても Arch Wiki の情報で助かったりするので、優秀なドキュメントになっているなと感じます。</p>\n<h2 id=\"おすすめのウィンドウマネージャ\"><a class=\"markdownIt-Anchor\" href=\"#おすすめのウィンドウマネージャ\">#</a> おすすめのウィンドウマネージャ</h2>\n<p>せっかくなので、Arch Linux 上での構成を少しだけお話します。</p>\n<p>自分はウィンドウを画面一杯、もしくは二つのウィンドウを右と左に分けて、と言った感じで敷き詰めるのが好きなので、タイル型のウィンドウマネージャが好きです。</p>\n<p>自分の PC に入れているのは、<a href=\"https://awesomewm.org/\" target=\"_blank\" rel=\"noopener\">awesome</a> というウィンドウマネージャです。<br>\nこちらを使うと、ショートカットキーで</p>\n<ul>\n<li>ウィンドウの配置</li>\n<li>フォーカスの切替</li>\n</ul>\n<p>などが簡単にできるので好みです。</p>\n<p><img src=\"2020-08-18T144707.png\" alt=\"2020-08-18T144707\"></p>\n<p>さらに、google-chrome の<a href=\"https://support.google.com/chrome/answer/1649523?co=GENIE.Platform%3DDesktop&amp;hl=ja\" target=\"_blank\" rel=\"noopener\"> remote desktop</a> も入るので、自宅の PC に Arch Linux を入れて、リモートデスクトップを経由して手元の PC から作業、なんてこともできます。</p>\n<p>リモートデスクトップの割に爆速で、中でどんな仕組みになっているか気になっちゃいますね。。。</p>\n<h1 id=\"まとめ\"><a class=\"markdownIt-Anchor\" href=\"#まとめ\">#</a> まとめ</h1>\n<p>Arch Linux はいいぞ。</p>\n",
            "tags": [
                "Arch Linux",
                "Linux"
            ]
        },
        {
            "id": "https://monet-technologies-com.github.io/tech-blog/2020/07/15/%E6%8A%80%E8%A1%93%E3%83%96%E3%83%AD%E3%82%B0%E5%A7%8B%E3%82%81%E3%81%BE%E3%81%97%E3%81%9F(VSCode%E3%81%AE%E8%A8%AD%E5%AE%9A%E7%B7%A8)/",
            "url": "https://monet-technologies-com.github.io/tech-blog/2020/07/15/%E6%8A%80%E8%A1%93%E3%83%96%E3%83%AD%E3%82%B0%E5%A7%8B%E3%82%81%E3%81%BE%E3%81%97%E3%81%9F(VSCode%E3%81%AE%E8%A8%AD%E5%AE%9A%E7%B7%A8)/",
            "title": "技術ブログ始めました(VSCodeの設定編)",
            "date_published": "2020-07-15T23:31:46.000Z",
            "content_html": "<h1 id=\"はじめに\"><a class=\"markdownIt-Anchor\" href=\"#はじめに\">#</a> はじめに</h1>\n<p>MONET Technologies 株式会社、2020 年新卒入社の竹内です。</p>\n<p>この記事では、技術ブログ開始に当たって、VSCode での Hexo 記事執筆環境を導入した話です。</p>\n<p>全体構成のお話は<a href=\"/tech-blog/2020/07/14/%E6%8A%80%E8%A1%93%E3%83%96%E3%83%AD%E3%82%B0%E5%A7%8B%E3%82%81%E3%81%BE%E3%81%97%E3%81%9F(%E6%A7%8B%E6%88%90%E7%B7%A8)/\" title=\"技術ブログ始めました(構成編)\">技術ブログ始めました(構成編)</a>でお話しています。</p>\n<p>静的サイトジェネレータである Hexo を導入したお話は<a href=\"/tech-blog/2020/07/15/%E6%8A%80%E8%A1%93%E3%83%96%E3%83%AD%E3%82%B0%E5%A7%8B%E3%82%81%E3%81%BE%E3%81%97%E3%81%9F(Hexo-on-Docker%E7%B7%A8)/\" title=\"技術ブログ始めました(Hexo-on-Docker編)\">技術ブログ始めました(Hexo-on-Docker編)</a>でお話しています。</p>\n<h2 id=\"楽な執筆環境に向けて\"><a class=\"markdownIt-Anchor\" href=\"#楽な執筆環境に向けて\">#</a> 楽な執筆環境に向けて</h2>\n<p>技術ブログ、エンジニアの方なら一度は書こうとするものだと思うのですが、3 ヶ月続けられた方には心からの拍手を送りたいです。</p>\n<p>やはり、モノを書く、アウトプットするのってコストが高いんですよね。単なるメモ程度なら雑に書いても良いわけですが、ブログとして書こうとするとある程度体裁を整えないといけなかったり。。。といったことを考えると、筆が重くなり。。。</p>\n<p>そこで今回は、執筆を楽にするためのツール、VSCode 上のエクステンションを紹介してみます。</p>\n<h2 id=\"vscode-hexo-utils\"><a class=\"markdownIt-Anchor\" href=\"#vscode-hexo-utils\">#</a> vscode-hexo-utils</h2>\n<p>Hexo+VSCode で執筆する際には必須のエクステンションです。<br>\nこの<a href=\"https://marketplace.visualstudio.com/items?itemName=fantasy.vscode-hexo-utils\" target=\"_blank\" rel=\"noopener\"> vscode-hexo-utils</a> を使うと</p>\n<ul>\n<li>記事一覧やタグ一覧を表示するサイドバーの追加</li>\n<li>マークダウンに画像を挿入したプレビュー時、Hexo ならではの画像ディレクトリ構成に対応してプレビューを見せてくれる</li>\n<li>Win:ctrl-alt-v Mac:opt-cmd-v でクリップボードの画像を貼り付け (記事に対応した画像配置用ディレクトリの作成とマークダウン上の参照文記述)</li>\n</ul>\n<p>などなどしてくれるので大分執筆が楽になります。特に画像の挿入は重要なので、開発者には頭が上がりません。</p>\n<h2 id=\"remote-development\"><a class=\"markdownIt-Anchor\" href=\"#remote-development\">#</a> Remote Development</h2>\n<p><a href=\"https://code.visualstudio.com/docs/remote/remote-overview\" target=\"_blank\" rel=\"noopener\">こちら</a>は Docker など、リモートとして作った環境に対して VSCode を接続できるエクステンションです。今回は Docker 上に Hexo や Git を構成しているので、直接接続して、Docker 上のコマンドを呼び出す、なんてことが簡単になります。</p>\n<p>ただ、残念なことが、 <strong>リモートで接続した際にクリップボードが共有化されていないらしく、上記の vscode-hexo-utils の画像コピペ機能が上手く働きません。</strong><br>\nそのため、こちらは残念ながら、執筆中には使えない感じになっています。。。<br>\nもしクリップボードの共有化ができると、</p>\n<ol>\n<li>vscode を直接 Docker に繋げる</li>\n<li>vscode-hexo-utils を使いながら執筆</li>\n<li>直接 Docker 内のコマンドを叩いてデプロイ</li>\n</ol>\n<p>といった使い方ができるようになります。</p>\n<p>もちろん今の Remote Development 機能も大変良いモノで、友人なんかは、RaspberryPi などでリモート環境を作る、VSCode でリモート接続して手元の PC で IoT 開発、なんてこともしているのでおすすめです。</p>\n<h2 id=\"vscodeのタスク機能\"><a class=\"markdownIt-Anchor\" href=\"#vscodeのタスク機能\">#</a> VSCode のタスク機能</h2>\n<p>今回は Docker を通じてのデプロイになりますが、VSCode の方でコマンドを打ってデプロイまで行いたいですよね。<br>\nそこで使うのが、VSCode のタスク機能です。</p>\n<p>参考になるのが<a href=\"https://fereria.github.io/reincarnation_tech/98_Other/VSCode/vscode_create_task/\" target=\"_blank\" rel=\"noopener\">こちら</a>です。</p>\n<p>自分は</p>\n<pre class=\"line-numbers language-language-json\" mdui-tooltip=\"{content: 'language-json'}\"><code class=\"language-language-json\">{\n  \"version\": \"2.0.0\",\n  \"tasks\": [\n    {\n      \"label\": \"deploy-hexo-on-docker\",\n      \"type\": \"shell\",\n      \"command\": \"docker exec -it hexo-domain.com git add . && docker exec -it hexo-domain.com git commit -m 'update ${fileBasenameNoExtension}' && docker exec -it hexo-domain.com git push\"\n    }\n  ]\n}\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>というコマンドを登録して、VSCode から Docker 上の Git を叩き、push するとともにデプロイを行っています。<br>\nこのタスク機能を使えば、任意のコマンドを VSCode 上で使えるので良いですね。</p>\n<h2 id=\"vscode-drawio\"><a class=\"markdownIt-Anchor\" href=\"#vscode-drawio\">#</a> vscode-drawio</h2>\n<p>最後に紹介するエクステンションは、<br>\n<a href=\"https://marketplace.visualstudio.com/items?itemName=hediet.vscode-drawio\" target=\"_blank\" rel=\"noopener\">vscode-drawio</a> です。</p>\n<p>こちらはブラウザ上で動く draw.io を vscode 上で動かそうというモノで、簡単な図を書きたい時に使えます。</p>\n<p>この、なんでもエディタ上にのせてやろうという心意気、自分は嫌いじゃないです。笑</p>\n<h1 id=\"まとめ\"><a class=\"markdownIt-Anchor\" href=\"#まとめ\">#</a> まとめ</h1>\n<p>様々な VSCode のエクステンションがあって、見ていて楽しいです。<br>\nもちろんエンジニアは何を生み出すか、も重要ですが、たまには息抜きに自分の道具を磨いて見るのも良いですね。</p>\n",
            "tags": [
                "hexo",
                "vscode"
            ]
        },
        {
            "id": "https://monet-technologies-com.github.io/tech-blog/2020/07/15/%E6%8A%80%E8%A1%93%E3%83%96%E3%83%AD%E3%82%B0%E5%A7%8B%E3%82%81%E3%81%BE%E3%81%97%E3%81%9F(Hexo-on-Docker%E7%B7%A8)/",
            "url": "https://monet-technologies-com.github.io/tech-blog/2020/07/15/%E6%8A%80%E8%A1%93%E3%83%96%E3%83%AD%E3%82%B0%E5%A7%8B%E3%82%81%E3%81%BE%E3%81%97%E3%81%9F(Hexo-on-Docker%E7%B7%A8)/",
            "title": "技術ブログ始めました(Hexo-on-Docker編)",
            "date_published": "2020-07-15T17:19:39.000Z",
            "content_html": "<h1 id=\"はじめに\"><a class=\"markdownIt-Anchor\" href=\"#はじめに\">#</a> はじめに</h1>\n<p>MONET Technologies 株式会社、2020 年新卒入社の竹内です。</p>\n<p>この記事では、技術ブログ開始に当たって、静的サイトジェネレータ Hexo を導入した話です。</p>\n<p>全体構成のお話は<a href=\"/tech-blog/2020/07/14/%E6%8A%80%E8%A1%93%E3%83%96%E3%83%AD%E3%82%B0%E5%A7%8B%E3%82%81%E3%81%BE%E3%81%97%E3%81%9F(%E6%A7%8B%E6%88%90%E7%B7%A8)/\" title=\"技術ブログ始めました(構成編)\">技術ブログ始めました(構成編)</a>でお話しています。</p>\n<h2 id=\"docker使ってみます\"><a class=\"markdownIt-Anchor\" href=\"#docker使ってみます\">#</a> Docker 使ってみます</h2>\n<p>さて、それでは本題に入っていきましょう。<br>\n前提として、今回は Hexo 環境を Docker で構築します。<br>\nDocker 環境自体の構築については<a href=\"https://awesome-linus.com/2019/08/17/mac-docker-install/\" target=\"_blank\" rel=\"noopener\">こちら</a>を参照しました。<br>\n筆者は今回初めて Docker を使ってみているので、変なところがあれば指摘していただければと思います。</p>\n<p>流れとしては、</p>\n<ol>\n<li>執筆用 Docker イメージのビルド</li>\n<li>Docker コンテナの実行</li>\n</ol>\n<p>といったところです。</p>\n<h2 id=\"執筆用dockerイメージのビルド\"><a class=\"markdownIt-Anchor\" href=\"#執筆用dockerイメージのビルド\">#</a> 執筆用 Docker イメージのビルド</h2>\n<p>まず、執筆用の Docker イメージをビルドするところから始まります。<br>\nHexo 用の Docker イメージとして<a href=\"https://github.com/spurin/docker-hexo\" target=\"_blank\" rel=\"noopener\">こちら</a>を参考にしました。</p>\n<p>Dockerfile をお好みに記述したら、記述したファイルの存在するディレクトリ上で、</p>\n<pre><code>$ docker build ./ -t docker-hexo\n</code></pre>\n<p>とすれば Docker イメージがビルドされます。</p>\n<p>上記リンクで紹介した Docker ファイルでは</p>\n<ul>\n<li>Hexo 環境の導入</li>\n<li>デプロイ用 Git の導入 (SSH キーの配置も含めて)</li>\n</ul>\n<p>まで行ってくれるようになっています。</p>\n<p>今回は、</p>\n<ol>\n<li>ブログのソースリポジトリを Github にプッシュ</li>\n<li>Github Pages の公開用リポジトリを更新</li>\n</ol>\n<p>という流れを自動化したかったので、Git の hook 機能を使って Hexo のコマンドを紐づけるようにしています。</p>\n<p>具体的には、Hexo 用のデプロイコマンドを記述したファイル <code>pre_push</code>  を作り、</p>\n<pre class=\"line-numbers language-language-sh\" mdui-tooltip=\"{content: 'language-sh'}\"><code class=\"language-language-sh\">#!/bin/sh\n\necho \"---hooked hexo commands start---\"\n#hexo clean\nhexo deploy --generate\necho \"---hooked hexo commands end---\"\necho \"---If you get a \"\"hexo command does not exist\"\" error,\"\necho \"it's seems You' re not running git on Docker.---\"\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p><code>~/.git/hooks/</code>  以下に配置するようにしています。</p>\n<p>今回は push する前という hook になっていますが、複数人で編集することを考えると、リモートリポジトリでのマージが終わったタイミングの方が良かったかもしれないと思っています。が、今回 Github がリモートリポジトリになっているので、リモートサーバ上での hook が実装できず、ひとまず push をトリガーにしています。<br>\nGitlab など自前で Git サーバを立てている際には、</p>\n<ol>\n<li>ブログを書く時にはまず執筆ブランチを切る</li>\n<li>ブログ執筆後、執筆ブランチ上の変更を push</li>\n<li>リモートリポジトリで執筆ブランチをマスターブランチにマージ</li>\n<li>マージ後の hook で公開用リポジトリへソースをデプロイ</li>\n</ol>\n<p>みたいな流れが安全そうです。</p>\n<h2 id=\"dockerコンテナの実行\"><a class=\"markdownIt-Anchor\" href=\"#dockerコンテナの実行\">#</a> Docker コンテナの実行</h2>\n<p>Docker イメージをビルドしたら、</p>\n<pre><code>$ docker create --name=hexo-domain.com \\\n-e HEXO_SERVER_PORT=4000 \\\n-e GIT_USER=&quot;hoge&quot; \\\n-e GIT_EMAIL=&quot;huga@sample.com&quot; \\\n-v /Path/To/Blog/app:/app \\\n-p 4000:4000 \\\ndocker-hexo\n\n$ docker start hexo-domain.com &amp;&amp; docker logs --follow hexo-domain.com\n</code></pre>\n<p>でコンテナを作成し開始します。<br>\nこれを行うことで、Docker コンテナ上の Hexo サーバが動き、</p>\n<p><a href=\"http://localhost:4000\" target=\"_blank\" rel=\"noopener\">http://localhost:4000</a></p>\n<p>を参照することでローカルなサイトのプレビューができるようになります。</p>\n<h1 id=\"まとめ\"><a class=\"markdownIt-Anchor\" href=\"#まとめ\">#</a> まとめ</h1>\n<p>Docker を使うことによって、複数人が使うブログの執筆環境をある程度簡易に構築することができました。<br>\n便利なツールが増える一方、依存関係などで導入が面倒になることもよくあるので、Docker のようなツールもうまく使えるとよりハッピーになりそうですね。</p>\n<p><s>時代の主流は SaaS でローカルに環境を整える場面も少なくなってきそうですが。。。</s></p>\n",
            "tags": [
                "hexo"
            ]
        },
        {
            "id": "https://monet-technologies-com.github.io/tech-blog/2020/07/14/%E6%8A%80%E8%A1%93%E3%83%96%E3%83%AD%E3%82%B0%E5%A7%8B%E3%82%81%E3%81%BE%E3%81%97%E3%81%9F(%E6%A7%8B%E6%88%90%E7%B7%A8)/",
            "url": "https://monet-technologies-com.github.io/tech-blog/2020/07/14/%E6%8A%80%E8%A1%93%E3%83%96%E3%83%AD%E3%82%B0%E5%A7%8B%E3%82%81%E3%81%BE%E3%81%97%E3%81%9F(%E6%A7%8B%E6%88%90%E7%B7%A8)/",
            "title": "技術ブログ始めました(構成編)",
            "date_published": "2020-07-14T05:09:45.000Z",
            "content_html": "<h1 id=\"はじめに\"><a class=\"markdownIt-Anchor\" href=\"#はじめに\">#</a> はじめに</h1>\n<p>MONET Technologies 株式会社、2020 年新卒入社の竹内です。</p>\n<p>この度、弊社でも社員の技術力向上 &amp; アウトプットのために、技術ブログを開設する運びとなりました。</p>\n<p>記念すべき 1 回目の記事は、この技術ブログの立ち上げについて一通り書きます。</p>\n<h2 id=\"技術ブログの選定\"><a class=\"markdownIt-Anchor\" href=\"#技術ブログの選定\">#</a> 技術ブログの選定</h2>\n<p>技術ブログを作成するに当たって考えたのは、</p>\n<ol>\n<li>サーバの維持コスト</li>\n<li>記事の管理コスト</li>\n<li>執筆環境</li>\n</ol>\n<p>の 3 点です。技術ブログを公開するというということは当然 Web サーバが必要になるわけですが、そこにコストやメンテナンスが必要になると継続するのが面倒です。なので、何か外部のサービスを使って公開したいという要求があります。<br>\nまた、ページを編集したら、編集履歴や差分まで管理したいです。<br>\n更に、執筆環境としては、普段コードを書いたりするエディタを使ってそのまま書きたいですよね。</p>\n<p>ということで、今回は静的サイトジェネレータ<a href=\"https://hexo.io/\" target=\"_blank\" rel=\"noopener\"> Hexo</a> と<a href=\"https://pages.github.com/\" target=\"_blank\" rel=\"noopener\"> Github Pages</a> を使って技術ブログを作ってみることにしました。ただ、今回用いる Hexo は Node.js で作られており、バージョン管理などが面倒です。そこで、今回は、</p>\n<ul>\n<li>生成環境：Docker 上の Hexo</li>\n<li>執筆環境：Visual Studio Code などの各自のエディタ</li>\n<li>公開環境：Github Pages</li>\n</ul>\n<p>という構成で全体を組みました (もちろん執筆環境はお好きなエディタを使ってください)。</p>\n<p>全体構成のイメージはこんな感じです。</p>\n<p><img src=\"2020-08-06T103219.png\" alt=\"2020-08-06T103219\"></p>\n<p>次回からそれぞれの環境について執筆していきます。</p>\n<h1 id=\"まとめ\"><a class=\"markdownIt-Anchor\" href=\"#まとめ\">#</a> まとめ</h1>\n<p>技術ブログを始めるので皆様ゆるゆるとお付き合いください！</p>\n",
            "tags": [
                "hexo",
                "vscode",
                "github",
                "docker"
            ]
        }
    ]
}