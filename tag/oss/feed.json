{
    "version": "https://jsonfeed.org/version/1",
    "title": "MONET Tech-Blog • All posts by \"oss\" tag",
    "description": "This is a tech-blog of MONET-Technologies",
    "home_page_url": "https://monet-technologies-com.github.io/tech-blog",
    "items": [
        {
            "id": "https://monet-technologies-com.github.io/tech-blog/2020/08/30/%E3%83%AB%E3%83%BC%E3%83%88%E6%A4%9C%E7%B4%A2OSS%20(OSRM)%20%E3%81%AE%E4%BA%88%E6%B8%AC%E7%B2%BE%E5%BA%A6%E3%82%92%E8%AA%BF%E3%81%B9%E3%81%BE%E3%81%97%E3%81%9F/",
            "url": "https://monet-technologies-com.github.io/tech-blog/2020/08/30/%E3%83%AB%E3%83%BC%E3%83%88%E6%A4%9C%E7%B4%A2OSS%20(OSRM)%20%E3%81%AE%E4%BA%88%E6%B8%AC%E7%B2%BE%E5%BA%A6%E3%82%92%E8%AA%BF%E3%81%B9%E3%81%BE%E3%81%97%E3%81%9F/",
            "title": "ルート検索OSS (OSRM) の予測精度を調べました (執筆中)",
            "date_published": "2020-08-30T19:06:55.000Z",
            "content_html": "<h1 id=\"執筆中の記事です-ドラフトです\"><a href=\"#執筆中の記事です-ドラフトです\" class=\"headerlink\" title=\"執筆中の記事です (ドラフトです)\"></a>執筆中の記事です (ドラフトです)</h1><p>システム部の登山担当太田です<br>山はいいぞ</p>\n<p>今回はルート検索のOSSであるOSRMを検証した話です<br>地図データにはOSMを用いています<br>導入は別で書きます</p>\n<h1 id=\"前談\"><a href=\"#前談\" class=\"headerlink\" title=\"前談\"></a>前談</h1><h2 id=\"ルート検索のコスト削減\"><a href=\"#ルート検索のコスト削減\" class=\"headerlink\" title=\"ルート検索のコスト削減\"></a>ルート検索のコスト削減</h2><p>MONETではオンデマンドバスサービスを提供していますが<br>その裏ではルート検索による時間取得のロジックが何度もはしっています<br>マッチングの最適化など今後進めていくにあたってもルート検索のコストは抑えたいところです<br>そこで信頼性をある程度担保して低コストなルート検索できないかな？<br>ということでOSSの有効性を検証しました</p>\n<h2 id=\"OSMとは\"><a href=\"#OSMとは\" class=\"headerlink\" title=\"OSMとは\"></a>OSMとは</h2><p>素晴らしい取り組みとしてOpen Street Map (OSM) という地理情報をみんなで作って行こうぜ！オープンライセンスで誰にでも使えるようにしようぜ！というイカしたプロジェクトがあります<br>Open Street Mapでは所々足りていない情報はありますが<br>道路のクラス分けや店舗の情報までオープンライセンスと考えれば十分すぎるほどの地理データが利用できます<br><img src=\"2020-08-31T130832.png\" alt=\"2020-08-31T130832\"></p>\n<div class=\"mdui-table-fluid theme-post__card__table--flat\"><table class=\"mdui-table mdui-table-hoverable \">\n<thead>\n<tr>\n<th></th>\n<th>OSMで利用可能な情報</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>○</td>\n<td>道路分類, 建物分類, 各名称</td>\n</tr>\n<tr>\n<td>×</td>\n<td>公共交通機関, 交通量</td>\n</tr>\n<tr>\n<td><br></td>\n<td></td>\n</tr>\n</tbody></table></div>\n<p>もちろん自分たちで編集ができ, 自宅の周りとか眺めてポチポチするだけで世界の地理データベース作成に貢献できるのでぜひやってみてください！</p>\n<h2 id=\"OSRMとは\"><a href=\"#OSRMとは\" class=\"headerlink\" title=\"OSRMとは\"></a>OSRMとは</h2><p>ルート検索エンジンのOSSです.<br>中身のアルゴリズムはmulti dikstraでOSMの地図情報を基に<br>最短ルートを決定します. (他のアルゴリズムも使用可)<br>高速道路を省いたり, Uターンを禁止したりなど<br>痒いところの設定までできてしまう優れものです.<br>Mapboxでも採用されていたりします.<a href=\"https://blog.mapbox.com/mapbox-directions-powered-by-osrm-4-8-1-cf2c45ae9aa8\">ブログ記事</a><br>ルート検索だけでなく<br>MapBoxでも採用されていたりします<br>このルート検索エンジン使ってどれくらい正しく予測できるの？<br>というのが今回のお題です</p>\n<h2 id=\"OSRMってどんな感じで動いてますん\"><a href=\"#OSRMってどんな感じで動いてますん\" class=\"headerlink\" title=\"OSRMってどんな感じで動いてますん\"></a>OSRMってどんな感じで動いてますん</h2><p>実装までは<a href=\"\">他記事</a>でも紹介されているので省きますが<br>ザクっとこんな感じです</p>\n<ol>\n<li>OSMの最新地図情報を保存</li>\n<li>luaファイル定義に従って重み付けされたグラフを作成</li>\n<li>HTTPサーバーを起動してリクエスト</li>\n</ol>\n<h1 id=\"検証\"><a href=\"#検証\" class=\"headerlink\" title=\"検証\"></a>検証</h1><p>最初に東京都内の限られた範囲でランダムに2点を<br>限られた範囲でのルート検索制度を検証しました.<br>検証範囲は以下になります.<br><img src=\"2020-09-01T095105.png\" alt=\"2020-09-01T095105\"><br>この中で1000回程度Google Direction API, OSRM APIどちらも叩いて統計差がどれくらいか, 変なルート通っていないか比較しました.</p>\n<p>設定はこんな感じです</p>\n<ul>\n<li>両方とも高速道路を通らない</li>\n<li>Direction APIはtrafficMode=optimistic</li>\n<li>OSRMは交通量情報を考慮しない</li>\n<li>OSRMの設定luaファイルはデフォルト (car.lua) のまま</li>\n</ul>\n<h1 id=\"結果\"><a href=\"#結果\" class=\"headerlink\" title=\"結果\"></a>結果</h1><h2 id=\"予測結果\"><a href=\"#予測結果\" class=\"headerlink\" title=\"予測結果\"></a>予測結果</h2><p>ランダムに1つ抜き出してきました.<br>ルートは似たようなルートを通っていますが<br>時間が結構ずれています.<br><img src=\"2020-09-01T095718.png\" alt=\"2020-09-01T095718\"></p>\n<h2 id=\"距離誤差＆時間誤差\"><a href=\"#距離誤差＆時間誤差\" class=\"headerlink\" title=\"距離誤差＆時間誤差\"></a>距離誤差＆時間誤差</h2><p>距離/時間の相対誤差のヒストグラムは以下のようになりました.<br><img src=\"2020-09-01T095458.png\" alt=\"2020-09-01T095458\"><br>ルート可視化と同様に, 距離誤差はデフォルトでもある程度正しいですが<br>時間誤差が大きいので修正が必要です.</p>\n<h2 id=\"速い道路-遅い道路の区分け\"><a href=\"#速い道路-遅い道路の区分け\" class=\"headerlink\" title=\"速い道路, 遅い道路の区分け\"></a>速い道路, 遅い道路の区分け</h2><p>適当に低速, 中速, 高速で分けると<br>高速の比率が大きいほど予測を外していることが分かりました.<br><img src=\"2020-09-01T100026.png\" alt=\"2020-09-01T100026\"></p>\n<h1 id=\"チューニング\"><a href=\"#チューニング\" class=\"headerlink\" title=\"チューニング\"></a>チューニング</h1><p>上記の結果を踏まえてチューニングを行いました.<br>luaファイル内では道路のタグ名ごとに初期設定速度を入れています.<br>今回はそちらを定数倍する大雑把な修正を行いました.</p>\n<p><img src=\"2020-09-01T100311.png\" alt=\"2020-09-01T100311\"></p>\n<p>これで統計的な情報をある程度合わせられる！(チューニングですので)</p>\n<h1 id=\"チューニング結果\"><a href=\"#チューニング結果\" class=\"headerlink\" title=\"チューニング結果\"></a>チューニング結果</h1><p>こんな感じになりました<br>散布図<br><img src=\"2020-09-01T100439.png\" alt=\"2020-09-01T100439\"><br>ヒストグラム<br><img src=\"2020-09-01T100501.png\" alt=\"2020-09-01T100501\"></p>\n<p>平均はあるていど合わせられましたが分散までGoogleの予測と同様とはやはり行かなかったです.<br>交通量の考慮も入ってくるのでそのままの代用は難しいですね.<br>一方, 大きく外すわけではないので裏のロジックに使用したりとか<br>使い道を考えれば導入できるのでは？という感触でした</p>\n<h1 id=\"まとめ\"><a href=\"#まとめ\" class=\"headerlink\" title=\"まとめ\"></a>まとめ</h1><p>Googleと比較して検証しました<br>全体大きくは外さないですがダメな時もありました<br>どこまでの精度求めるかによりますが<br>存外使えるかもという事で裏側ロジックでの実装と導入<br>どの部分に使うかを模索することになりました.</p>\n",
            "tags": [
                "OSS",
                "OSM",
                "OSRM"
            ]
        }
    ]
}